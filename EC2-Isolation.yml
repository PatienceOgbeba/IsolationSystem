AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Free Tierâ€“Eligible EC2 Threat Response: Isolate & Stop suspicious instance using Lambda triggered by EventBridge

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC ID where your EC2 instance resides.

Resources:

  IsolationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Isolation group with no ingress
      VpcId: !Ref VpcId

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EC2IsolationPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:StopInstances
                  - ec2:DescribeInstances
                  - ec2:ModifyInstanceAttribute
                  - ec2:DescribeSecurityGroups
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  IsolateEC2Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: IsolateSuspiciousEC2
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 10
      Environment:
        Variables:
          ISOLATION_SG_ID: !Ref IsolationSecurityGroup
      Code:
        ZipFile: |
          import boto3
          import os

          ec2 = boto3.client('ec2')
          ISOLATION_SG_ID = os.environ['ISOLATION_SG_ID']

          def lambda_handler(event, context):
              instance_id = event['detail']['instance-id']
              print(f"Isolating instance: {instance_id}")

              ec2.stop_instances(InstanceIds=[instance_id])
              print(f"Stopped instance: {instance_id}")

              ec2.modify_instance_attribute(
                  InstanceId=instance_id,
                  Groups=[ISOLATION_SG_ID]
              )
              print(f"Security group updated to isolation group: {ISOLATION_SG_ID}")
              return {
                  'statusCode': 200,
                  'body': f'Instance {instance_id} stopped and isolated.'
              }

  SuspiciousEC2EventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Detect suspicious EC2 instance launch and trigger isolation Lambda"
      EventPattern:
        source:
          - "aws.ec2"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventName:
            - RunInstances
          userIdentity:
            type:
              - "IAMUser"
            userName:
              - "suspicious-user"  # Replace with the actual user or condition to detect suspicious activity
      Targets:
        - Arn: !GetAtt IsolateEC2Lambda.Arn
          Id: "IsolateLambdaTarget"
          InputTransformer:
            InputPathsMap:
              instanceId: "$.detail.responseElements.instancesSet.items[0].instanceId"
            InputTemplate: '{"detail":{"instance-id":"<instanceId>"}}'

  IsolateEC2LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref IsolateEC2Lambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SuspiciousEC2EventRule.Arn

Outputs:
  LambdaFunctionName:
    Value: !Ref IsolateEC2Lambda
    Description: Name of the Lambda function

  IsolationSecurityGroupId:
    Value: !Ref IsolationSecurityGroup
    Description: ID of the Isolation Security Group

  EventBridgeRuleName:
    Value: !Ref SuspiciousEC2EventRule
    Description: Name of the EventBridge rule detecting suspicious EC2 launches
